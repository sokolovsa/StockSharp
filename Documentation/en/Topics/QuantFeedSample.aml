<?xml version="1.0" encoding="utf-8"?>
<topic id="733374e6-1410-468e-b2df-c7d3f2081ef3" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      	The application SampleQuantFeed shows an example of working with <codeEntityReference>T:StockSharp.QuantHouse.QuantFeedTrader</codeEntityReference>
      	as shown in the figure below. The example source code is in the <legacyBold>Samples/QuantHouse</legacyBold> folder of the installation package.
      </para>
      <mediaLink><image placement="center" xlink:href="QuantFeedSample"/></mediaLink>
 	  <list class="ordered">
 	  	<listItem>
 	  		<para>First, you need to create an instance of the <codeEntityReference>T:StockSharp.QuantHouse.QuantFeedTrader</codeEntityReference>:</para>
 	  		<code language="C#"><![CDATA[
// the connector initialization
Trader = new QuantFeedTrader();

Trader.Login = Login.Text;
Trader.Password = Password.SecurePassword;
Trader.Address = Address.Text.To<EndPoint>();
]]>
			</code>
		</listItem>
		<listItem>
 	  		<para>Next, you should subscribe on required <codeEntityReference>T:StockSharp.QuantHouse.QuantFeedTrader</codeEntityReference> events:</para>
 	  		<code language="C#">
// subscribe on connection successfully event
Trader.Connected += () =>
{
	_isConnected = true;
	Trader.RegisterNews();

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));
// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(false));

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// subscribe on error event
Trader.Error += error =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// subscribe on error of market data subscription event
Trader.MarketDataSubscriptionFailed += (security, msg, error) =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));

Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Trader.NewNews += news => _newsWindow.NewsGrid.News.Add(news);

			</code>
		</listItem>
		<listItem>
 	  		<para>Then you need to establish the connection:</para>
 	  		<code language="C#">
Trader.Connect();
			</code>
		</listItem>
		<listItem>
 	  		<para>The subscription to the news in the event handler will be done after a successful connection:</para>
 	  		<code language="C#">
Trader.RegisterNews();
			</code>
 	  		<para>After this operation the following events should be expected:</para>
 	  		<list class="ordered">
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – instrument change (last price, best bid/ask price, etc.).</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
 	  			order book change, requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference> method.</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
 	  			new ticks on instruments subscribed by using <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> method.</listItem>
 	  			<listItem><codeEntityReference>E:StockSharp.BusinessEntities.IConnector.NewNews</codeEntityReference> – news.</listItem>
 	  		</list>
 	  	</listItem>
		<listItem>
 	  		<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
 	  		<code language="C#">
private void FindClick(object sender, RoutedEventArgs e)
{
	var wnd = new SecurityLookupWindow { Criteria = new Security { Code = "AAPL" } };

	if (!wnd.ShowModal(this))
		return;

	MainWindow.Instance.Trader.LookupSecurities(wnd.Criteria);
}

			</code>
		</listItem>
		<listItem>
 	  		<para>
 	  			For updates on the selected instrument and ticks you need to use the
 	  			<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> and
 	  			<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> methods, respectively:
 	  		</para>
 	  		<code language="C#">
private void Level1Click(object sender, RoutedEventArgs e)
{
	TryInitialize();

	var window = _level1Windows.SafeAdd(SelectedSecurity, security =>
	{
		// create level1 window
		var wnd = new Level1Window { Title = security.Code + " level1" };

		// subscribe on level1
		MainWindow.Instance.Trader.RegisterSecurity(security);

		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();
}

			</code>
		</listItem>
		<listItem>
 	  		<para>To request updates on the order books you need to use the <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference> method:</para>
 	  		<code language="C#">
private void DepthClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Trader;

	var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
	{
		// subscribe on order book flow
		trader.RegisterMarketDepth(security);

		// create order book window
		var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();

	TryInitialize();
}

			</code>
		</listItem>		
      </list>
    </introduction>
  </developerConceptualDocument>
</topic>