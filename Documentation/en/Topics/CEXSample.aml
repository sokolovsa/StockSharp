<?xml version="1.0" encoding="utf-8"?>
<topic id="c003db77-3e6f-4ef6-bbdd-658d14e34357" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The SampleCex application shows an example of working with the <codeEntityReference qualifyHint="false">T:StockSharp.Cex.CexTrader</codeEntityReference>
      as shown in the figure below.	The example source code is in the <legacyItalic>Samples/Cex</legacyItalic> folder of the installation package.</para>
		<mediaLink><image placement="center" xlink:href="CexSample"/></mediaLink>
    </introduction>
    
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>First, you need to create an instance of the
					<codeEntityReference qualifyHint="false">T:StockSharp.Cex.CexTrader</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
Trader = new CexTrader();// { LogLevel = LogLevels.Debug };
.....
Trader.Key = Key.Text;
Trader.Secret = Secret.Password;
							]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Next, you should subscribe on required <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference> events:</para>
            		<code language="C#">
            				<![CDATA[
// subscribe on successfully connect event
Trader.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labes
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// subscribe on connection error event
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Connection was dropped.");	
});

// subscribe on successfully disconnect event
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// subscribe on error event
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Data processing error"));

// new securities received
Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);

// new own trades received
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);

// new anonymous trades received
Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);

// new orders received
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);

// new portofolios (=accounts) received
Trader.NewPortfolio += portfolio =>
{
	// subscribe on portfolio updates
	Trader.RegisterPortfolio(portfolio);

	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
};
Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// subscribe on error of order registration event
Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
// subscribe on error of order cancelling event
Trader.OrderCancelFailed += OrderFailed;
      
							]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Finally, you need to connect to <token>Cex</token> server:</para>
            		<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
					</code>						
				</content>
			</step>
					
			<step>
				<content>
					<para>Once connected, you can expect to trigger events:</para>
						<list class="bullet">
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
								instrument change (last price, best bid/ask price, etc.) requested through 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									order book change, requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
									new ticks on instruments subscribed by using <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> method.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									portfolios change requested through <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference> method.</para>
							</listItem>
						</list>
				</content>
			</step>

			<step>
				<content>
					<para>Instruments search (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">in more detail</link>):</para>
				</content>
				<mediaLink><image placement="center" xlink:href="SecuritiesLookupWindow"/></mediaLink>
			</step>
			<step>
				<content>
					<para>For updates on the selected instrument and ticks you need to use the
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> and
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> methods, respectively:</para>
            		<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Trader;

	foreach (var security in SecurityPicker.SelectedSecurities)
	{
		if (trader.RegisteredSecurities.Contains(security))
		{
			trader.UnRegisterSecurity(security);
			trader.UnRegisterTrades(security);
		}
		else
		{
			trader.RegisterSecurity(security);
			trader.RegisterTrades(security);
		}
	}
}
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>To request updates on the order books you need to use the 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference> method:</para>
            				<code language="C#">
            				<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
	var trader = MainWindow.Instance.Trader;

	foreach (var security in SecurityPicker.SelectedSecurities)
	{
		var window = _quotesWindows.SafeAdd(security, s =>
		{
			trader.RegisterMarketDepth(security);
			var wnd = new QuotesWindow
			{
				Title = security.Id + " " + LocalizedStrings.MarketDepth
			};
			wnd.MakeHideable();
			return wnd;
		});

		if (window.Visibility == Visibility.Visible)
			window.Hide();
		else
			window.Show();

		if (!_initialized)
		{
			TraderOnMarketDepthChanged(trader.GetMarketDepth(security));
			trader.MarketDepthChanged += TraderOnMarketDepthChanged;
			_initialized = true;
		}
	}
}
							]]>
							</code>
						</content>
					</step>
					
					
					<step>
						<content>
							<para>For orders registration the <legacyBold>New Order</legacyBold> button used. 
							The <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>
							method sends an order to the server:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = MainWindow.Instance.Trader,
		MarketDataProvider = MainWindow.Instance.Trader,
		Portfolios = new PortfolioDataSource(MainWindow.Instance.Trader),
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>
					<step>
						<content>
							<para>To withdraw funds in code need to create a conditional order, and fill necessary requisites:</para>
            				<code language="C#">
            				<![CDATA[
var order = new Order
{
	Type = OrderTypes.Conditional,
	Condition = new CexOrderCondition
	{
		IsWithdraw = true,
		WithdrawInfo = new WithdrawInfo
		{
			// fill necessary requisites
			Comment = "My profit",
			//PaymentId = "45467dyjyttR8WBiTJXptyuTx4wbSerGZ5t45", //Riple
			CryptoAddress = "16zK3M53JBGnjs9ajTBGBfkRqoHtm4E573",
		}
	},
	Security = new Security() { Code = "BTC" },
};

Trader.RegisterOrder(order);

							]]>
							</code>						
						</content>
					</step>
				</steps>
		</procedure>
    
  </developerConceptualDocument>
</topic>