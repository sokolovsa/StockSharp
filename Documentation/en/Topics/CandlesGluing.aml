<?xml version="1.0" encoding="utf-8"?>
<topic id="f71010d3-135c-4fe9-a573-abf0245b3f5d" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para>
		In order to glue historical candles with a real-time, it is necessary to initialize the corresponding storage of trade objects 
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry</codeEntityReference>,
		storage of market data 
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> 
		and registry of snapshot storage 
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.SnapshotRegistry</codeEntityReference>.
		</para>
		<para>Consider the following example of gluing 
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference>
		using the tick data saved with <token>hydra</token>:</para>
        <code language="C#">
        <![CDATA[
private Connector _connector;

private Security security;
private CandleSeries _series;
private readonly CsvEntityRegistry _csvEntityRegistry;
private readonly StorageRegistry _storageRegistry;
private readonly SnapshotRegistry _snapshotRegistry;
private const string _historyPath = @"e:\DataServer\";

...
public MainWindow()
		{
			InitializeComponent();     
            ....   
            _csvEntityRegistry = new CsvEntityRegistry(_historyPath);
            _storageRegistry = new StorageRegistry
            {
            	DefaultDrive = new LocalMarketDataDrive(_historyPath),
            };
            _snapshotRegistry = new SnapshotRegistry("Snapshots");
            _connector.InitializeStorage(_entityRegistry, _storageRegistry, _snapshotRegistry);

            _connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(30);
		}

...

_connector.CandleSeriesProcessing += Connector_CandleSeriesProcessing;

...


_candleSeries =
	new CandleSeries(CandleSettingsEditor.Settings.CandleType, security, CandleSettingsEditor.Settings.Arg)
	{
		BuildCandlesMode = MarketDataBuildModes.Build,
		BuildCandlesFrom = MarketDataTypes.Trades,
		IsCalcVolumeProfile = true,
	};
  
_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);
		]]>
		</code>
		
		<para>After that, candles will start to arrive to the CandleSeriesProcessing event handler, starting from the first historical and until the current real-time:</para>

        <code language="C#">
        <![CDATA[
        
		private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
		{
			Chart.Draw(_candleElement, candle);
		}
		]]>
		</code>
<para>If the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference>, 
 is originally created, then no need to initialize StorageAdapter, enough to pass the storage of  trade objects 
 <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry</codeEntityReference>, 
 storage of market data <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> 
 and registry of snapshot storage 
 <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.SnapshotRegistry</codeEntityReference>

to the <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference> constructor:</para>

        <code language="C#">
        <![CDATA[
...
_csvEntityRegistry = new CsvEntityRegistry(_historyPath);
_storageRegistry = new StorageRegistry
{
   DefaultDrive = new LocalMarketDataDrive(_historyPath),
};
_snapshotRegistry = new SnapshotRegistry("Snapshots");
_connector = new Connector(_entityRegistry, _storageRegistry, _snapshotRegistry, supportOffline: true, supportSubscriptionTracking: true);
_connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
...
		]]>
		</code>

	</introduction>

	</developerWalkthroughDocument>
</topic>