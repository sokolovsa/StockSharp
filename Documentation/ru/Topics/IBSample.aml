<?xml version="1.0" encoding="utf-8"?>
<topic id="7c23b480-d472-43df-aabf-f743ad09fded" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.InteractiveBrokers.InteractiveBrokersTrader</codeEntityReference> демонстрирует приложение SampleIB,
        показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/InteractiveBrokers</legacyItalic>.</para>
		
		<mediaLink><image placement="center" xlink:href="ib_main_window"/></mediaLink>
    </introduction>
    <procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>В самом начале необходимо создать экземпляр класса шлюза <codeEntityReference qualifyHint="false">T:StockSharp.InteractiveBrokers.InteractiveBrokersTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader = new InteractiveBrokersTrader {
	Address = Address.Text.To<IPEndPoint>(),
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	this.GuiAsync(() => ChangeConnectStatus(true));
	// запускаем подписку на новости
	Trader.RegisterNews();
};

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	ChangeConnectStatus(false);
	MessageBox.Show(this, error.ToString(), "Ошибка соединения");
});

// подписываемся на событие успешного отключения
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));
Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewStopOrder += order => _conditionOrdersWindow.OrderGrid.Orders.Add(order);

Trader.NewPortfolio += portfolio =>
{
	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
	Trader.RegisterPortfolio(portfolio);
};
Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// подписываемся на событие о неудачной регистрации заявок
Trader.OrdersRegisterFailed += OrdersFailed;

// подписываемся на событие о неудачном снятии заявок
Trader.OrdersCancelFailed += OrdersFailed;

							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Далее необходимо выполнить подключение к серверу <token>ib</token>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>При успешном подключении можно ожидать срабатывания событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecurityChanged</codeEntityReference> – 
									изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> инструментам.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
								</listItem>
							</list>
						</content>
					</step>

					<step>
						<content>
							<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="ib_securities"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
private void FindClick(object sender, RoutedEventArgs e)
{
	var wnd = new SecurityLookupWindow { Criteria = new Security { Code = "AAPL", Type = SecurityTypes.Stock } };

	if (!wnd.ShowModal(this))
		return;

	Trader.LookupSecurities(wnd.Criteria);
}
							]]>
							</code>
							
							<para>Если инструментов с заданными критериями не будет найдено, то вернется ошибка через событие <codeEntityReference>E:StockSharp.BusinessEntities.IConnector.Error</codeEntityReference>:</para>
							<mediaLink><image placement="center" xlink:href="ib_security_not_found"/></mediaLink>
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по выбранному инструменту необходимо вызвать метод
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.RegisterSecurity(SelectedSecurity);
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void DepthClick(object sender, RoutedEventArgs e)
{
	if (Depth.IsChecked == false)
	{
		// create order book window
		var wnd = new QuotesWindow { Title = SelectedSecurity.Id + " " + LocalizedStrings.MarketDepth };
		_quotesWindows.Add(SelectedSecurity, wnd);

		// subscribe on order book flow
		Trader.RegisterMarketDepth(SelectedSecurity);

		wnd.Show();
	}
	else
	{
		Trader.UnRegisterMarketDepth(SelectedSecurity);

		var wnd = _quotesWindows[SelectedSecurity];
		_quotesWindows.Remove(SelectedSecurity);

		wnd.Close();
	}

	if (!_initialized)
	{
		TraderOnMarketDepthChanged(Trader.GetMarketDepth(SecurityPicker.SelectedSecurity));
		Trader.MarketDepthChanged += TraderOnMarketDepthChanged;
		_initialized = true;
	}
}

							]]>
							</code>
							<mediaLink><image placement="center" xlink:href="ib_market_depth"/></mediaLink>
						</content>
					</step>

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = Trader,
		MarketDataProvider = Trader,
		Portfolios = new PortfolioDataSource(Trader),
	};

	if (newOrder.ShowModal(this))
		Trader.RegisterOrder(newOrder.Order);
}

							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
  </developerConceptualDocument>
</topic>