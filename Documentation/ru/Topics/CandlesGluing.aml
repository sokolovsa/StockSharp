<?xml version="1.0" encoding="utf-8"?>
<topic id="f71010d3-135c-4fe9-a573-abf0245b3f5d" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para>
		Для того, чтобы склеить исторические свечи с реал-тайм, надо инициализировать соответствующие
		хранилище торговых объектов <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry</codeEntityReference>, 
		хранилище маркет-данных <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> и 
		реестр хранилищ-снэпшотов <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.SnapshotRegistry</codeEntityReference>.
		</para>
		<para>Рассмотрим склеивание на примере <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference> 
		с использованием тиковых данных, сохраненных с помощью <token>hydra</token>:</para>
        <code language="C#">
        <![CDATA[
private Connector _connector;

private Security security;
private CandleSeries _series;

//объявляем хранилище торговых объектов CsvEntityRegistry и хранилище маркет-данных StorageRegistry
private readonly CsvEntityRegistry _csvEntityRegistry;
private readonly StorageRegistry _storageRegistry;
private readonly SnapshotRegistry _snapshotRegistry;
// Путь к данным истории
private const string _historyPath = @"e:\DataServer\";

...
public MainWindow()
		{
			InitializeComponent();     
            ....   
            _csvEntityRegistry = new CsvEntityRegistry(_historyPath);
            _storageRegistry = new StorageRegistry
            {
            	DefaultDrive = new LocalMarketDataDrive(_historyPath),
            };
            _snapshotRegistry = new SnapshotRegistry("Snapshots");
            _connector.InitializeStorage(_entityRegistry, _storageRegistry, _snapshotRegistry);

            //Устанавливаем количество дней для загрузки данных.
            _connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(30);
		}

...

_connector.CandleSeriesProcessing += Connector_CandleSeriesProcessing;

...


_candleSeries =
	new CandleSeries(CandleSettingsEditor.Settings.CandleType, security, CandleSettingsEditor.Settings.Arg)
	{
		BuildCandlesMode = MarketDataBuildModes.Build,
		BuildCandlesFrom = MarketDataTypes.Trades,
		IsCalcVolumeProfile = true,
	};
  
_connector.SubscribeCandles(_candleSeries, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);
		]]>
		</code>
		
		<para>После этого, в обработчик события CandleSeriesProcessing начнут поступать свечи, начиная с первой исторической и по текущую реал-тайм:</para>

        <code language="C#">
        <![CDATA[
        
		private void Connector_CandleSeriesProcessing(CandleSeries candleSeries, Candle candle)
		{
			Chart.Draw(_candleElement, candle);
		}
		]]>
		</code>
<para>Если изначально создаётся <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference>, 
то в инициализации StorageAdapter нет необходимости, достаточно передать 
хранилище торговых объектов <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.Csv.CsvEntityRegistry</codeEntityReference>,  
хранилище маркет-данных <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference> и 
реестр хранилищ-снэпшотов <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.SnapshotRegistry</codeEntityReference> 

в конструктор <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Connector</codeEntityReference> </para>

        <code language="C#">
        <![CDATA[
...
_csvEntityRegistry = new CsvEntityRegistry(_historyPath);
_storageRegistry = new StorageRegistry
{
   DefaultDrive = new LocalMarketDataDrive(_historyPath),
};
_snapshotRegistry = new SnapshotRegistry("Snapshots");
_connector = new Connector(_entityRegistry, _storageRegistry, _snapshotRegistry, supportOffline: true, supportSubscriptionTracking: true);
_connector.StorageAdapter.DaysLoad = TimeSpan.FromDays(3);
...
		]]>
		</code>

	</introduction>

	</developerWalkthroughDocument>
</topic>