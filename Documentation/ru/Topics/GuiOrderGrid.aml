<?xml version="1.0" encoding="utf-8"?>
<topic id="5bb4f6f0-9057-4a88-b968-a5fd60641d4d" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para><codeEntityReference>T:StockSharp.Xaml.OrderGrid</codeEntityReference> - таблица для отображения заявок. 
      Кроме того контекстное меню этой таблицы содержит команды для операций с заявками: регистрация, замена и отмена заявок. Выбор пункта меню приводит к генерации
      событий: <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference>, 
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> или 
      <codeEntityReference qualifyHint="true">E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> соответственно.</para>
      <mediaLink><image placement="left" xlink:href="GUI_OrderGrid" /></mediaLink>
	<alert class="note">
  		<para>Сама операция (регистрация, замена, отмена) не выполняется. Соответствующий код нужно прописывать в обработчиках событий самостоятельно.</para>
	</alert>

	<para>
		<legacyBold>Основные члены</legacyBold>
	</para>
      
	<list class="bullet">
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.Orders</codeEntityReference> - список заявок.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrder</codeEntityReference> - выбранная заявка.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.OrderGrid.SelectedOrders</codeEntityReference> - выбранные заявки.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>M:StockSharp.Xaml.OrderGrid.AddRegistrationFail(StockSharp.BusinessEntities.OrderFail)</codeEntityReference> - метод, который добавляет сообщение об ошибке регистрации заявки в поле комментария.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderRegistering</codeEntityReference> - событие регистрации заявки (возникает после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderReRegistering</codeEntityReference> - событие замены заявки (возникает после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>E:StockSharp.Xaml.OrderGrid.OrderCanceling</codeEntityReference> - событие отмены заявки (возникает после выбора соответствующего пункта контекстного меню).</para>
  		</listItem>
  		
	</list>

      
     	  <para>
Ниже показаны фрагменты кода с его использованием. Пример кода взят из <legacyItalic>Samples/Quik/Sample</legacyItalic>.
      </para>
      
      
      
       <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="Sample.OrdersWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.Orders}" Height="410" Width="930">
	<xaml:OrderGrid x:Name="OrderGrid" x:FieldModifier="public" OrderCanceling="OrderGrid_OnOrderCanceling" OrderReRegistering="OrderGrid_OnOrderReRegistering" />
</Window>
	  				]]>
              </code>
              <code title="C#" language="C#">
              		<![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{

        .......................................

		if (Trader == null)
		{
			// создаем подключение
		    Trader = new QuikTrader
		    {
		        LuaFixServerAddress = Address.Text.To<EndPoint>(),
		        LuaLogin = Login.Text,
		        LuaPassword = Password.Password.To<SecureString>(),
		        LogLevel = LogLevels.Debug
		    };
            .......................................			
			
			// Добавляем заявки в таблицу OrderGrid
			Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
			
			// Добавляем стоп-заявки в таблицу OrderGrid
			Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
			
			.......................................			

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled =
				ShowMyTrades.IsEnabled = ShowOrders.IsEnabled =
					ShowPortfolios.IsEnabled = ShowStopOrders.IsEnabled = true;
		}

		Trader.Connect();

		_isConnected = true;
		ConnectBtn.Content = LocalizedStrings.Disconnect;
	}
	else
	{
		Trader.Disconnect();

		_isConnected = false;
		ConnectBtn.Content = LocalizedStrings.Connect;
	}
}
              	
// Удаляет все выбранные заявки
private void OrderGrid_OnOrderCanceling(IEnumerable<Order> orders)
{
	orders.ForEach(_connector.CancelOrder);
}

// Открывает окно редактирования заявки и выполняет замену выбранной заявки
private void OrderGrid_OnOrderReRegistering(Order order)
{
	var window = new OrderWindow
	{
		Title = LocalizedStrings.Str2976Params.Put(order.TransactionId),
		SecurityProvider = _connector,
		MarketDataProvider = _connector,
		Portfolios = new PortfolioDataSource(_connector),
		Order = order.ReRegisterClone(newVolume: order.Balance)
	};

	if (window.ShowModal(this))
		_connector.ReRegisterOrder(order, window.Order);
}
	  				]]>
             </code>
    </introduction>
  </developerConceptualDocument>
</topic>