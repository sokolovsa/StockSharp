<?xml version="1.0" encoding="utf-8"?>
<topic id="f43e0966-da3b-4709-ae47-c6c7f9546567" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.SpbEx.SpbExTrader</codeEntityReference> демонстрирует приложение SampleSpbEx,
        показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/SpbEx</legacyItalic>.</para>
		<mediaLink><image placement="center" xlink:href="SpbExSample"/></mediaLink>
    </introduction>
    <procedure>
		<steps class="ordered">
			<step>
				<content>
					<para>В самом начале необходимо создать экземпляр класса шлюза 
					<codeEntityReference qualifyHint="false">T:StockSharp.SpbEx.SpbExTrader</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[
// создаем шлюз
Trader = new SpbExTrader();
.....
Trader.Login = Login.Text;
Trader.Password = Password.SecurePassword;
Trader.Config = NetworkCfg.SelectedConfig;
]]>
					</code>
				</content>
			</step>
			<step>
				<content>
					<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            		<code language="C#">
            				<![CDATA[

Trader.Restored += () => this.GuiAsync(() =>
{
	// update gui labes
	ChangeConnectStatus(true);
	MessageBox.Show(this, LocalizedStrings.Str2958);
});

// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// устанавливаем флаг (соединение установлено)
	_isConnected = true;

	// обновляем пользовательский интерфейс
	this.GuiAsync(() => ChangeConnectStatus(true));
};
					
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// подписываемся на событие ошибки соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// обновляем пользовательский интерфейс
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

// подписываемся на событие ошибки
Trader.Error += error =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

// подписываемся на событие ошибки получения рыночных данных
Trader.MarketDataSubscriptionFailed += (security, type, error) =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));

Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
					
Trader.NewPortfolio += portfolio =>
{
	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);

	// подписываемся на событие обновления портфеля
	Trader.RegisterPortfolio(portfolio);
};
Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);


// подписываемся на событие ошибки регистрации заявки
Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;

// подписываемся на событие ошибки отмены заявки
Trader.OrdersCancelFailed += OrdersFailed;

// подписываемся на событие ошибки регистрации стоп-заявки
Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;

// подписываемся на событие ошибки отмены стоп-заявки
Trader.StopOrdersCancelFailed += OrdersFailed;

							]]>
					</code>						
				</content>
			</step>
			<step>
				<content>
					<para>Далее необходимо выполнить подключение к серверу <token>spbex_external</token>:</para>
            		<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
					</code>						
				</content>
			</step>
					
			<step>
				<content>
					<para>После подключения можно ожидать срабатывания событий:</para>
						<list class="bullet">
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecurityChanged</codeEntityReference> – 
								изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через 
								<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> инструментам.</para>
							</listItem>
							<listItem>
								<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
							</listItem>
						</list>
				</content>
			</step>
			<step>
				<content>
					<para>Для получения обновлений по выбранному инструменту необходимо вызвать методам
					<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>:</para>
					<mediaLink><image placement="center" xlink:href="SpbExSecurities"/></mediaLink>
            		<code language="C#">
            				<![CDATA[
private void Level1Click(object sender, RoutedEventArgs e)
{
	var security = SecurityPicker.SelectedSecurity;
	var trader = MainWindow.Instance.Trader;

	if (trader.RegisteredSecurities.Contains(security))
	{
		trader.UnRegisterSecurity(security);
	}
	else
	{
		trader.RegisterSecurity(security);
	}
}
							]]>
							</code>						
						</content>
					</step>

				<!--	<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
	var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
	{
		// начинаем получать котировки стакана
		MainWindow.Instance.Trader.RegisterMarketDepth(security);

		// создаем окно со стаканом
		var wnd = new QuotesWindow { Title = security.Code + " котировки" };
		wnd.MakeHideable();
		return wnd;
	});

	if (window.Visibility == Visibility.Visible)
		window.Hide();
	else
		window.Show();
}
							]]>
							</code>
							<mediaLink><image placement="center" xlink:href="lmax_sample_market_depth"/></mediaLink>
						</content>
					</step> -->

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка <legacyBold>Новая заявка</legacyBold>.
							В качестве названия счета необходимо выбирать тот, который начинается с числа:</para>
							<mediaLink><image placement="center" xlink:href="SpbExNewOrder"/></mediaLink>
							<para>Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = MainWindow.Instance.Trader,
		MarketDataProvider = MainWindow.Instance.Trader,
		Portfolios = new PortfolioDataSource(MainWindow.Instance.Trader),
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>
   
  </developerConceptualDocument>
</topic>