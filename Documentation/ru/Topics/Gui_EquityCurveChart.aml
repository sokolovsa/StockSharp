<?xml version="1.0" encoding="utf-8"?>
<topic id="da275a7f-ff6f-4dc7-8451-bf4fc22624a6" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
     <introduction>
      <para>
      <codeEntityReference>T:StockSharp.Xaml.Charting.EquityCurveChart</codeEntityReference> - графический компонет для отбражения кривой доходности.
      </para>
      <para>
      	Ниже приведен пример использования этого компонета. Полный код примера находится в Samples/Testing/SampleRandomEmulation. 
      </para>
    </introduction>
    
    <mediaLink><image placement="left" xlink:href="Gui_EquityCurveChart"/></mediaLink>
    
      <procedure>
      <title>Пример построения графика EquityCurveChart</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В XAML добавляем графический компонент <codeEntityReference>T:StockSharp.Xaml.Charting.EquityCurveChart</codeEntityReference>.
					  Присваиваем компоненту имя <legacyBold>Curve</legacyBold>.
				  </para>
				   <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="SampleRandomEmulation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        Title="{x:Static loc:LocalizedStrings.XamlStr564}" Height="460" Width="604"
		xmlns:sx="clr-namespace:StockSharp.Xaml;assembly=StockSharp.Xaml"
		xmlns:charting="http://schemas.stocksharp.com/xaml">
    
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="85*" />
			<ColumnDefinition Width="497*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>
		<Grid Grid.ColumnSpan="2">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="100" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="10" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="10" />
			</Grid.RowDefinitions>

			<Button x:Name="StartBtn" Content="{x:Static loc:LocalizedStrings.Str2421}" Grid.Row="0" Click="StartBtnClick" />
			<ProgressBar x:Name="TestingProcess" Grid.Column="1" Grid.Row="0" />

			<Button x:Name="Report" Content="{x:Static loc:LocalizedStrings.XamlStr432}" Grid.Row="0" Width="75" IsEnabled="False" Click="ReportClick" Grid.Column="2" Margin="0,0,0,-1" />
		</Grid>
		
		<Grid Grid.Row="1" Grid.ColumnSpan="2" Grid.Column="0">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="180"/>
					<ColumnDefinition Width="*"/>
				</Grid.ColumnDefinitions>

				<sx:StatisticParameterGrid Grid.Column="0" x:Name="ParameterGrid" />
				<charting:EquityCurveChart Grid.Column="1" x:Name="Curve" />
			</Grid>
		</Grid>
	</Grid>
</Window>
	  				]]>
              </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В коде главного окна создаем источник данных для отрисовки графика при помощи метода <codeEntityReference>Overload:StockSharp.Xaml.Charting.EquityCurveChart.CreateCurve</codeEntityReference>.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
private readonly ICollection<EquityData> _curveItems;

.................................................
              		
public MainWindow()
{
	InitializeComponent();

	_logManager.Listeners.Add(new FileLogListener("log.txt"));
	_curveItems = Curve.CreateCurve("Equity", Colors.DarkGreen, ChartIndicatorDrawStyles.Line);
}
	  				]]>

				   
				   </code>
		  		</content>
		  </step>
		  <step>
			  <content>
				  <para>
					  При изменении значения PnL стратегии добавляем данные в источник данных. При этом используем специальный класс
					  <codeEntityReference>T:StockSharp.Xaml.Charting.EquityData</codeEntityReference>.
				  </para>
				   <code title="C#" language="C#">
              		<![CDATA[
_strategy.PnLChanged += () =>
		{
			var data = new EquityData
			{
				Time = _strategy.CurrentTime,
				Value = _strategy.PnL,
			};
			
			this.GuiAsync(() => _curveItems.Add(data));
		};
	  				]]>

				   </code>
		  		</content>
		  </step>
		  
		  </steps>
    </procedure>
  </developerConceptualDocument>
</topic>





