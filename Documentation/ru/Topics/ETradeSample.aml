<?xml version="1.0" encoding="utf-8"?>
<topic id="2b16e1d6-32bf-426d-8d20-08020f5f1f40" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>В качестве примера работы с <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>
      рассмотрим приложение SampleETrade, показанное на рисунке ниже. Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/ETrade</legacyItalic>.</para>
		
		<mediaLink><image placement="center" xlink:href="etrade_sample_main_window"/></mediaLink>
    </introduction>
    <procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>В самом начале необходимо создать экземпляр класса шлюза <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader = new ETradeTrader(IsSandbox, IsSandbox ? GetSandboxSecurities() : null)
{
	ConsumerKey = ConsumerKey,
	ConsumerSecret = secret,
	LogLevel = LogLevels.Debug,
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// подписываемся на событие успешного соединения
Trader.Connected += () => this.GuiAsync(() =>OnConnectionChanged(true));

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	OnConnectionChanged(Trader.IsConnected);
	MessageBox.Show(this, error.ToString(), "Ошибка соединения");
});

Trader.Disconnected += () =>this.GuiAsync(() => OnConnectionChanged(false));

Trader.Error += error =>this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);

Trader.NewPortfolio += portfolio =>
{
	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);

	// регистрирует портфели на обновление данных
	Trader.RegisterPortfolio(portfolio);
};

Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// подписываемся на событие о неудачной регистрации заявок
Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
// подписываемся на событие о неудачном снятии заявок
Trader.OrderCancelFailed += OrderFailed;

// подписываемся на событие о неудачной регистрации стоп-заявок
Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
// подписываемся на событие о неудачном снятии стоп-заявок
Trader.StopOrderCancelFailed += OrderFailed;
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Далее необходимо выполнить авторизацию на сервере <token>etrade</token>:</para>
            				
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>	
							
							<para>Если в текущий день авторизация уже проводилась, то однократного вызова 
							<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.BusinessEntities.IConnector.Connect</codeEntityReference>
							достаточно.	В противном случае <codeEntityReference qualifyHint="false">T:StockSharp.ETrade.ETradeTrader</codeEntityReference>
							автоматически запустит полную процедуру авторизации, в рамках которой пользователю будет предложено ввести логин/пароль на сайте <token>etrade</token>, 
							после чего пользователь получит код верификации. Код верификации необходимо записать в свойство
							<codeEntityReference qualifyHint="true">P:StockSharp.ETrade.ETradeTrader.VerificationCode</codeEntityReference>, после чего повторно стартовать процедуру авторизации:</para>
							
            				<code language="C#">
            				<![CDATA[
Trader.VerificationCode = Verifier;
Trader.Connect();
							]]>
							</code>							
						</content>
					</step>
					<step>
					<content>
							<para>После подключения можно ожидать срабатывания событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecurityChanged</codeEntityReference> – изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через 
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
								</listItem>
							</list>							
						</content>
					</step>

					<step>
						<content>
							<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="etrade_sample_securities"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
private void FindClick(object sender, RoutedEventArgs e)
{
	var wnd = new SecurityLookupWindow { Criteria = new Security { Code = "AAPL" } };

	if (!wnd.ShowModal(this))
		return;

	MainWindow.Instance.Trader.LookupSecurities(wnd.Criteria);
}

							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по портфелям используется метод 
							<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.NewPortfolio += portfolio =>
{
	_portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);

	// регистрирует портфели на обновление данных
	Trader.RegisterPortfolio(portfolio);
};
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». Метод 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> 
							отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = MainWindow.Instance.Trader,
		MarketDataProvider = MainWindow.Instance.Trader,
		Portfolios = new PortfolioDataSource(MainWindow.Instance.Trader),
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}
							]]>
							</code>						
						</content>
					</step>
				</steps>
		</procedure>
  </developerWalkthroughDocument>
</topic>