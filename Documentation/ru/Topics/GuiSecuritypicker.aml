<?xml version="1.0" encoding="utf-8"?>
<topic id="f4e84944-41ad-42f2-9d2a-2854a8665152" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>Компонент <codeEntityReference>T:StockSharp.Xaml.SecurityPicker</codeEntityReference> предназначен для поиска и выбора инструментов. Поддерживается как одиночный, так и множественный выбор. 
      Компонент позволяет фильтровать список инструментов по их типу. Также этот компонент может использоваться для отображения финансовой информации (полей level1), как показано в разделе
      <link xlink:href="de52af78-ec80-45b4-9820-0052f8add762">SecurityGrid</link>.
      </para>
       <mediaLink><image placement="left" xlink:href="GUI_SecurityPicker2" /></mediaLink>	
      <para>
      	<codeEntityReference>T:StockSharp.Xaml.SecurityPicker</codeEntityReference> состоит из:
      </para>	
      	
	<list class="ordered">
  		<listItem>
  			<para>Текстового поля, для ввода кода (или Id) инструмента. При вводе выполняется фильтрация списка по введенной подстроке.</para>
  		</listItem>
  		<listItem>
  			<para>Специального комбинированного списка <codeEntityReference>T:StockSharp.Xaml.<codeInline></codeInline>SecurityTypeComboBox</codeEntityReference> 
  			для фильтрации инструментов по их типу.</para>
  		</listItem>
  		<listItem>
  			<para>Таблицы <codeEntityReference>T:StockSharp.Xaml.SecurityGrid</codeEntityReference> для отображения списка инструментов.</para>
  		</listItem>
	</list>
      
      <para>
       <legacyBold>Основные свойства</legacyBold>
      </para>
     
	  <list class="bullet">
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.SelectionMode</codeEntityReference> - режим выбора инструмента: одиночный, множественный.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.ShowCommonStatColumns</codeEntityReference> - отображать основные колонки.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.ShowCommonOptionColumns</codeEntityReference> - отображать основные колонки для опционов.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.Title</codeEntityReference> - заголовок, который отображается в верхней части компонента.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.Securities</codeEntityReference> - список инструментов.</para>
  		</listItem>
  	 	<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.SelectedSecurity</codeEntityReference> - выбранный инструмент.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.SelectedSecurities</codeEntityReference> - список выбранных инструментов.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.FilteredSecurities</codeEntityReference> - список отфильтрованных инструментов.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.ExcludeSecurities</codeEntityReference> - список скрытых в списке инструментов.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.SelectedType</codeEntityReference> - выбранный тип инструмента.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.SecurityProvider</codeEntityReference> - провайдер информации об инструментах.</para>
  		</listItem>
  		<listItem>
  			<para><codeEntityReference>P:StockSharp.Xaml.SecurityPicker.MarketDataProvider</codeEntityReference> - провайдер рыночных данных.</para>
  		</listItem>
  		
	  </list>
	  
      <para>
       Ниже показан фрагмент кода с его использованием, взятый из примера <legacyItalic>Samples/Quik/Sample</legacyItalic> .
      </para>
 <section>
 
 <sections>
 	<section address="SubSection1">
     	<content>
             
              <code title="XAML" language="XAML">
	  		<![CDATA[
<Window x:Class="Sample.SecuritiesWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.Securities}" Height="415" Width="1081">
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>

		<xaml:SecurityPicker x:Name="SecurityPicker" x:FieldModifier="public" SecuritySelected="SecurityPicker_OnSecuritySelected" ShowCommonStatColumns="True" />

		<StackPanel Grid.Row="1" HorizontalAlignment="Right" Orientation="Horizontal">
			<Button x:Name="Find" Width="100" Click="FindClick">
				<TextBlock><Run Text="{x:Static loc:LocalizedStrings.Find}" />...</TextBlock>
			</Button>
            <Button x:Name="Level1" Content="Level1..." Width="100" IsEnabled="False" Click="Level1Click" />
			<Button x:Name="Depth" Width="100" IsEnabled="False" Click="DepthClick">
				<TextBlock><Run Text="{x:Static loc:LocalizedStrings.MarketDepth}" />...</TextBlock>
			</Button>
			<Button x:Name="NewOrder" Width="100" IsEnabled="False" Click="NewOrderClick">
				<TextBlock><Run Text="{x:Static loc:LocalizedStrings.NewOrder}" />...</TextBlock>
			</Button>
			<Button x:Name="NewStopOrder" Width="120" IsEnabled="False" Click="NewStopOrderClick">
				<TextBlock><Run Text="{x:Static loc:LocalizedStrings.NewStopOrder}" />...</TextBlock>
			</Button>
		</StackPanel>
	</Grid>
</Window>
	  	]]>
              </code>
              <code title="C#" language="C#">
              <![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{
       ......................................

		if (Trader == null)
		{
			// создаем подключение
		    Trader = new QuikTrader
		    {
		        LuaFixServerAddress = Address.Text.To<EndPoint>(),
		        LuaLogin = Login.Text,
		        LuaPassword = Password.Password.To<SecureString>(),
		        LogLevel = LogLevels.Debug
		    };


		    _logManager.Sources.Add(Trader);

			// отключение автоматического запроса всех инструментов.
			Trader.RequestAllSecurities = AllSecurities.IsChecked == true;

			// возводим флаг, что соединение установлено
			_isConnected = true;

			// переподключение будет работать только во время работы биржи РТС
			// (чтобы отключить переподключение когда торгов нет штатно, например, ночью)
			Trader.ReConnectionSettings.WorkingTime = ExchangeBoard.Forts.WorkingTime;

			// подписываемся на событие об успешном восстановлении соединения
			Trader.Restored += () => this.GuiAsync(() => MessageBox.Show(this, LocalizedStrings.Str2958));

			// подписываемся на событие разрыва соединения
			Trader.ConnectionError += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString()));

			// подписываемся на ошибку обработки данных (транзакций и маркет)
			Trader.Error += error =>this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

			// подписываемся на ошибку подписки маркет-данных
			Trader.MarketDataSubscriptionFailed += (security, msg, error) =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(msg.DataType, security)));

			Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
			Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
			Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
			Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
			Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
			Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
			Trader.OrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены заявки"));
			Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
			Trader.StopOrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены стоп заявки"));
			Trader.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
			Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

			Trader.MassOrderCancelFailed += (transId, error) =>
				this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str716));

			// устанавливаем поставщик маркет-данных
			_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled =
				ShowMyTrades.IsEnabled = ShowOrders.IsEnabled =
					ShowPortfolios.IsEnabled = ShowStopOrders.IsEnabled = true;
		}

		Trader.Connect();

		_isConnected = true;
		ConnectBtn.Content = LocalizedStrings.Disconnect;
	}
	else
	{
		Trader.Disconnect();

		_isConnected = false;
		ConnectBtn.Content = LocalizedStrings.Connect;
	}
}

private void SecurityPicker_OnSecuritySelected(Security security)
{
	NewStopOrder.IsEnabled = NewOrder.IsEnabled =
	Level1.IsEnabled = Depth.IsEnabled = security != null;
}
]]>
              </code>
          </content>
      </section>
   </sections>
</section>
      
    </introduction>
    
         <!--<relatedTopics>
       <link xlink:href="3dc4f866-ab4e-4c74-a627-13727abdb966">SecurityPickerWindow</link>
    </relatedTopics>-->

    
  </developerConceptualDocument>
</topic>