<?xml version="1.0" encoding="utf-8"?>
<topic id="d3ed9f9d-f5b5-4306-a542-206fa99f83c0" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
	<introduction>
		<para>
			Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.Transaq.TransaqTrader</codeEntityReference> демонстрирует приложение SampleTransaq, показанное на рисунке ниже.
			Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/Transaq</legacyItalic>.
		</para>
		
		<mediaLink><image placement="center" xlink:href="transaq_sample_main_window"/></mediaLink>
	</introduction>
	
		<procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>В самом начале необходимо создать экземпляр класса шлюза <codeEntityReference qualifyHint="false">T:StockSharp.Transaq.TransaqTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader = new TransaqTrader
{
	Login = Login.Text,
	Password = Password.Password,
	Address = Address.Text.To<EndPoint>(),
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// возводим флаг, что соединение установлено
	_isConnected = true;

	// запускаем подписку на новости
	Trader.RegisterNews();

	// разблокируем кнопку Экспорт
	this.GuiAsync(() => ChangeConnectStatus(true));

	foreach (var portfolio in Trader.Portfolios)
	{
		// регистрирует портфели на обновление данных
		Trader.RegisterPortfolio(portfolio);
	}
};


// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// заблокируем кнопку Экспорт (так как соединение было потеряно)
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Ошибка соединения");	
});

// подписываемся на событие успешного отключения
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// событие ошибки обработки данных
Trader.Error += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

// событие получения новых инструментов
Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
// событие получения новых собственных сделок
Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
// событие получения новых сделок по подписанным инструментам
Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
// событие получения новых заявок
Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
// событие получения новых стоп-заявок
Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
// событие получения новых портфелей
Trader.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
// событие получения новых позиций
Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

// подписываемся на событие о неудачной регистрации заявок
Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
// подписываемся на событие о неудачном снятии заявок
Trader.OrderCancelFailed += OrderFailed;

// подписываемся на событие о неудачной регистрации стоп-заявок
Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
// подписываемся на событие о неудачном снятии стоп-заявок
Trader.StopOrderCancelFailed += OrderFailed;


							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Далее необходимо выполнить подключение:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>При успешном подключении можно ожидать срабатывания событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecurityChanged</codeEntityReference> – 
									изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного 
									через <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrade</codeEntityReference> – 
									новые тики по подписанным с помощью 
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> инструментам.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IPortfolioProvider.PortfolioChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью 
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
								</listItem>
							</list>
						</content>
					</step>
					
					<step>
						<content>
							<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="transaq_sample_securities"/></mediaLink>
						</content>
					</step>					

					<step>
						<content>
							<para>Для получения обновлений по выбранному инструменту и тиков необходимо воспользоваться методами 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> 
							и <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes})</codeEntityReference> соответственно:</para>
            				<code language="C#">
            				<![CDATA[
private void QuotesClick(object sender, RoutedEventArgs e)
{
    var security = SelectedSecurity;
    var trader = MainWindow.Instance.Trader;

    if (_bidAskSecurities.Contains(security))
    {
        // останавливаем обновления по инструменту
        trader.UnRegisterSecurity(security);
        trader.UnRegisterTrades(security);

        _bidAskSecurities.Remove(security);
    }
    else
    {
        // начинаем получать обновления по инструменту
        trader.RegisterSecurity(security);
        trader.RegisterTrades(security);

        _bidAskSecurities.Add(security);
    }
}
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int64},StockSharp.Messages.MarketDataBuildModes,System.Nullable{StockSharp.Messages.MarketDataTypes},System.Nullable{System.Int32})</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
		private void DepthClick(object sender, RoutedEventArgs e)
		{
			var trader = MainWindow.Instance.Trader;

			var window = _quotesWindows.SafeAdd(SecurityPicker.SelectedSecurity, security =>
			{
				// начинаем получать котировки стакана
				trader.RegisterMarketDepth(security);

				// создаем окно со стаканом
				var wnd = new QuotesWindow { Title = security.Id + " " + LocalizedStrings.MarketDepth };
				wnd.MakeHideable();
				return wnd;
			});

			if (window.Visibility == Visibility.Visible)
				window.Hide();
			else
				window.Show();

			if (!_initialized)
			{
				TraderOnMarketDepthChanged(trader.GetMarketDepth(SecurityPicker.SelectedSecurity));
				trader.MarketDepthChanged += TraderOnMarketDepthChanged;
				_initialized = true;
			}
		}
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по портфелям используется метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void NewOrderClick(object sender, RoutedEventArgs e)
{
	var newOrder = new OrderWindow
	{
		Order = new Order { Security = SecurityPicker.SelectedSecurity },
		SecurityProvider = MainWindow.Instance.Trader,
		MarketDataProvider = MainWindow.Instance.Trader,
		Portfolios = new PortfolioDataSource(MainWindow.Instance.Trader),
	};

	if (newOrder.ShowModal(this))
		MainWindow.Instance.Trader.RegisterOrder(newOrder.Order);
}

							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>	
  </developerWalkthroughDocument>
</topic>