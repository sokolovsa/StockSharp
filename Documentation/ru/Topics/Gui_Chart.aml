<?xml version="1.0" encoding="utf-8"?>
<topic id="a76a0a9c-bb95-4596-9464-9903379b3096" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference> - графический компонет, который позволяет строить 
      биржевые графики: свечи, индикаторы, и отображать на графиках маркеры заявок и сделок.
      </para>
      <para>
      	Ниже приведен пример построения графика при помощи компонета <codeEntityReference>T:StockSharp.Xaml.Charting.Chart</codeEntityReference>. За основу взят
      	пример из Samples/Quik/SampleCandles, в который внесены некоторые изменения. 
      </para>
    </introduction>
    
     <mediaLink><image placement="left" xlink:href="Gui_ChartSample" /></mediaLink>
    
      <procedure>
      <title>Пример построения графика при помощи Chart</title>

      <steps class="ordered">
		  <step>
			  <content>
				  <para>
					  В XAML создаем окно и добавляем в него графический компонент <codeEntityReference qualifyHint="true">T:StockSharp.Xaml.Charting.Chart</codeEntityReference>.
					  Присваиваем компоненту имя <legacyBold>Chart</legacyBold>. Обратите внимание, что при создании окна нужно добавить пространство имен
					  <legacyItalic>http://schemas.stocksharp.com/xaml</legacyItalic>.
				  </para>
				   <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="SampleCandles.ChartWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:charting="http://schemas.stocksharp.com/xaml"
        Title="ChartWindow" Height="300" Width="300">
   <charting:Chart x:Name="Chart" x:FieldModifier="public" />
</Window>

	  				]]>
              </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В коде главного окна декларируем переменные для областей графика, элементов графика и индикаторов.					  
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
              		
private readonly Dictionary<CandleSeries, ChartWindow> _chartWindows = new Dictionary<CandleSeries, ChartWindow>();
private QuikTrader _trader;

private readonly LogManager _logManager;

private ChartArea _candlesArea;
private ChartArea _indicatorsArea;

private ChartIndicatorElement _smaChartElement;
private ChartIndicatorElement _macdChartElement;
private ChartCandleElement _candlesElem;

private SimpleMovingAverage _sma;
private MovingAverageConvergenceDivergence _macd;
              		
	  				]]>

				   
				   </code>
			  </content>
		  </step>
		    <step>
			  <content>
				  <para>
					  В обработчике события <legacyBold>Click</legacyBold> кнопки <legacyBold>Connect</legacyBold>, наряду с подпиской на события коннектора и вызовом метода
					   <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.Connect</codeEntityReference>, подписываемся на событие
					   <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference>. 
					   В обработчике этого события при получении новой свечи будет выполнятся отрисовка графика.
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
              		
private void ConnectClick(object sender, RoutedEventArgs e)
{
		 
	..........................................		 

	if (_trader == null)
	{
		// создаем подключение
		_trader = isLua
			? new QuikTrader
			{
				LuaFixServerAddress = Address.Text.To<EndPoint>(),
				LuaLogin = Login.Text,
				LuaPassword = Password.Password.To<SecureString>()
			}
			: new QuikTrader(Path.Text) { IsDde = true };
			
		..........................................		 

		_logManager.Sources.Add(_trader);
		// подписываемся на событие об успешном восстановлении соединения
		_trader.Restored += () => this.GuiAsync(() => MessageBox.Show(this, LocalizedStrings.Str2958));

		// подписываемся на событие разрыва соединения
		_trader.ConnectionError += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString()));

		// подписываемся на ошибку обработки данных (транзакций и маркет)
		_trader.Error += error =>
			this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

		// подписываемся на ошибку подписки маркет-данных
		_trader.MarketDataSubscriptionFailed += (security, type, error) =>
			this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));
				
		Security.SecurityProvider = new FilterableSecurityProvider(_trader);

		_trader.CandleSeriesProcessing += DrawCandle;
		_trader.Connect();
		ConnectBtn.IsEnabled = false;
	}
}
	  				]]>
				   </code>
			  </content>
		  </step>
		  <step>
			  <content>
				  <para>
					  В обработчике кнопки <legacyBold>ShowChart</legacyBold> создаем объекты индикаторов, областей и элементов графика. Добавляем элементы к областям, а области к чарту. Открываем окно графика
					  и запускаем работу кандлменеджера.
				  </para>
				    <code title="C#" language="C#">
              		<![CDATA[
private void ShowChartClick(object sender, RoutedEventArgs e)
{
	var security = SelectedSecurity;

	var series = new CandleSeries(CandlesSettings.Settings.CandleType, security, CandlesSettings.Settings.Arg);

	_chartWindows.SafeAdd(series, key =>
	{
		var wnd = new ChartWindow
		{
			Title = "{0} {1} {2}".Put(security.Code, series.CandleType.Name, series.Arg)
		};

		wnd.MakeHideable();

		// инициализируем индикаторы
        _sma = new SimpleMovingAverage() { Length = 11 };
        _macd = new MovingAverageConvergenceDivergence();

		// инициализируем элементы графика
        _smaChartElement = new ChartIndicatorElement();
        _macdChartElement = new ChartIndicatorElement();
        _candlesElem = new ChartCandleElement();

		// устанавливаем стиль отображения MACD в виде гистограммы
        _macdChartElement.DrawStyle = ChartIndicatorDrawStyles.Histogram;

		// инициализируем области графика
        _candlesArea = new ChartArea();
        _indicatorsArea = new ChartArea();

		// добавляем области к чарту
        wnd.Chart.Areas.Add(_candlesArea);
        wnd.Chart.Areas.Add(_indicatorsArea);

		// добавляем элементы к областям
        _candlesArea.Elements.Add(_candlesElem);
        _candlesArea.Elements.Add(_smaChartElement);
        _indicatorsArea.Elements.Add(_macdChartElement);

        return wnd;
	}).Show();
	_trader.SubscribeCandles(series, DateTime.Today.Subtract(TimeSpan.FromDays(30)), DateTime.Now);
}
	  				]]>
				   </code>
			  </content>
		  </step>
		  		  <step>
			  <content>
				<para>
					  В обработчике события <codeEntityReference qualifyHint="true">E:StockSharp.Algo.Connector.CandleSeriesProcessing</codeEntityReference> производим отрисовку
					  свечи и значений индикаторов для каждой завершенной свечи. Для этого:
				</para>
				<list class="ordered">
  					<listItem>
  						<para>Вычисляем значения индикаторов.</para>
  					</listItem>
  					<listItem>
  						<para>Заполняем словарь <legacyBold>elements</legacyBold> парами "объект элемента - значение элемента"</para>
  					</listItem>
  					<listItem>
  						<para>Для отрисовки графика вызываем метод 
  						<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.Charting.Chart.Draw(StockSharp.Xaml.Charting.ChartDrawData)</codeEntityReference>,
  						в который передаем время и словарь элементов.</para>
  					</listItem>
				</list>
				  
				 <para>
					  Результат работы программы представлен на рисунке выше.
				</para>
				  
				    <code title="C#" language="C#">
              		<![CDATA[
private void DrawCandle(CandleSeries series, Candle candle)
{
	var wnd = _chartWindows.TryGetValue(series);

	if (wnd != null)
	{
		if (candle.State != CandleStates.Finished)
			return;

		var smaValue = _sma.Process(candle);
		var macdValue = _macd.Process(candle);

		var data = new ChartDrawData();
		data
		  .Group(candle.OpenTime)
		    .Add(_candlesElem, candle)
		    .Add(_smaChartElement, smaValue)
		    .Add(_macdChartElement, macdValue);

        	wnd.Chart.Draw(data);
               
	}
}]]>
				   </code>
			  </content>
		  </step>
		  
		  </steps>
    </procedure>
    
  </developerConceptualDocument>
</topic>


