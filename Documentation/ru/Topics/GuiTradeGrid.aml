<?xml version="1.0" encoding="utf-8"?>
<topic id="8ec4f4b6-e7c8-4bf0-b05e-1d98960ca45f" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
          <mediaLink><image placement="left" xlink:href="GUI_TradeGrid" /></mediaLink>
      <para>
      	<codeEntityReference>T:StockSharp.Xaml.TradeGrid</codeEntityReference> - таблица сделок.
      </para>
      <para>
       <legacyBold>Основные свойства</legacyBold>
      </para>
      
		<list class="bullet">
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.Trades</codeEntityReference> - список сделок.</para>
  			</listItem>
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.SelectedTrade</codeEntityReference> - выбранная сделка.</para>
  			</listItem>
  			<listItem>
  				<para><codeEntityReference>P:StockSharp.Xaml.TradeGrid.SelectedTrades</codeEntityReference> - выбранные сделки.</para>
  			</listItem>
		</list>
		
	  <para>
Ниже показаны фрагменты кода с его использованием. Пример кода взят из <legacyItalic>Samples/Quik/Sample</legacyItalic>.
      </para>
      

      
       <code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="Sample.TradesWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
    xmlns:xaml="http://schemas.stocksharp.com/xaml"
    Title="{x:Static loc:LocalizedStrings.Str985}" Height="284" Width="544">
	<xaml:TradeGrid x:Name="TradeGrid" x:FieldModifier="public" />
</Window>
	  				]]>
              </code>
              <code title="C#" language="C#">
              		<![CDATA[
private void ConnectClick(object sender, RoutedEventArgs e)
{
	if (!_isConnected)
	{

        .......................................

		if (Trader == null)
		{
			// создаем подключение
	      Trader = new QuikTrader
	      {
	          LuaFixServerAddress = Address.Text.To<EndPoint>(),
	          LuaLogin = Login.Text,
	          LuaPassword = Password.Password.To<SecureString>(),
	          LogLevel = LogLevels.Debug
	      };


            .......................................			
			
			// Добавляем инструменты в компонент SecurityPicker
			Trader.NewSecurity += security => _securitiesWindow.SecurityPicker.Securities.Add(security);
			
			// Добавляем свои сделки в таблицу MyTradeGrid
			Trader.NewMyTrade += trade => _myTradesWindow.TradeGrid.Trades.Add(trade);
			
			// Добавляем сделки в таблицу TradeGrid
			Trader.NewTrade += trade => _tradesWindow.TradeGrid.Trades.Add(trade);
			
			// Добавляем заявки в таблицу OrderGrid
			Trader.NewOrder += order => _ordersWindow.OrderGrid.Orders.Add(order);
			
			// Добавляем стоп-заявки в таблицу OrderGrid
			Trader.NewStopOrder += order => _stopOrdersWindow.OrderGrid.Orders.Add(order);
			
			Trader.OrderRegisterFailed += _ordersWindow.OrderGrid.AddRegistrationFail;
			Trader.OrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены заявки"));
			Trader.StopOrderRegisterFailed += _stopOrdersWindow.OrderGrid.AddRegistrationFail;
			Trader.StopOrderCancelFailed += fail => this.GuiAsync(() => MessageBox.Show(this, fail.Error.Message, "Ошибка отмены стоп заявки"));
			
			
			// Добавляем портфели в таблицу PortfolioGrid
			Trader.NewPortfolio += portfolio => _portfoliosWindow.PortfolioGrid.Portfolios.Add(portfolio);
			
			// Добавляем позиции в таблицу PortfolioGrid
			Trader.NewPosition += position => _portfoliosWindow.PortfolioGrid.Positions.Add(position);

			// устанавливаем поставщик маркет-данных для компонента SecurityPicker
			_securitiesWindow.SecurityPicker.MarketDataProvider = Trader;

			ShowSecurities.IsEnabled = ShowTrades.IsEnabled =
				ShowMyTrades.IsEnabled = ShowOrders.IsEnabled =
					ShowPortfolios.IsEnabled = ShowStopOrders.IsEnabled = true;
		}

		Trader.Connect();

		_isConnected = true;
		ConnectBtn.Content = LocalizedStrings.Disconnect;
	}
	else
	{
		Trader.Disconnect();

		_isConnected = false;
		ConnectBtn.Content = LocalizedStrings.Connect;
	}
}            		
	  				]]>
             </code>
    </introduction>
  </developerConceptualDocument>
</topic>

