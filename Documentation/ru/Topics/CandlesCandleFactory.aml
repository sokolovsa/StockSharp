<?xml version="1.0" encoding="utf-8"?>
<topic id="99da6499-9ac1-4e7e-bcaf-a0c832dce4de" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    
	<introduction>
		<para><token>stocksharp</token> позволяет расширить возможности построения свечей, давая возможность работать с произвольными типами свечей.
		Это полезно в тех случаях, когда требуется работать со свечами, не поддерживаемыми в данный момент <token>stocksharp</token>. Ниже описан план действия
		по добавлению тиковых свечей (свечи, которые формируются по количеству сделок).</para>
    </introduction>
    
	<procedure>
		<title>Реализация тиковых свечей</title>
		<steps class="ordered">
			<step>
				<content>
<para>В начале необходимо создать свой тип свечи. Тип должен наследоваться от класса <codeEntityReference>T:StockSharp.Algo.Candles.Candle</codeEntityReference>:</para>

<alert class="caution">Тиковые свечи поддерживаются <token>stocksharp</token> стандартно и данный шаг представлен лишь в качестве примера.</alert>

<code language="C#">
<![CDATA[
/// <summary>
/// Свеча, группируемая по количеству сделок.
/// </summary>
public class TickCandle : Candle
{
    /// <summary>
    /// Параметр свечи.
    /// </summary>
    public override object Arg
    {
        get
        {
            return this.TradeCount;
        }
        set
        {
            this.TradeCount = (int) value;
        }
    }

    /// <summary>
    /// Максимальное количество сделок, которое может содержать свеча.
    /// </summary>
    public int TradeCount { get; set; }
}
]]>
</code>
				</content>
			</step>

			<step>
				<content>
<para>Дополнительно, необходимо создать свой тип сообщения свечи. Подробнее, о <link xlink:href="5794f4b0-c536-4713-ad08-955a4a01b196">сообщениях</link>.
Тип должен наследоваться от класса <codeEntityReference>T:StockSharp.Messages.CandleMessage</codeEntityReference>:</para>

<code language="C#">
<![CDATA[
/// <summary>
/// Свеча, группируемая по количеству сделок.
/// </summary>
public class TickCandleMessage : CandleMessage
{
	public TickCandleMessage()
		: base(MessageTypes.CandleTick)
	{
	}

	/// <summary>
	/// Максимальное количество сделок, которое может содержать свеча.
	/// </summary>
	public int MaxTradeCount { get; set; }

	/// <summary>
	/// Создать копию <see cref="TickCandleMessage"/>.
	/// </summary>
	/// <returns>Копия.</returns>
	public override Message Clone()
	{
		return CopyTo(new TickCandleMessage
		{
			MaxTradeCount = MaxTradeCount
		});
	}

	/// <summary>
	/// Параметр свечи.
	/// </summary>
	public override object Arg
	{
		get => MaxTradeCount;
		set => MaxTradeCount = (int)value;
	}
}]]>
</code>
				</content>
			</step>
     
			<step>
				<content>
<para>Далее требуется создать построителя свечей, для нового типа свечей. Для этого необходимо создать реализацию 
<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.CandleBuilder`1</codeEntityReference>.
В метод <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)</codeEntityReference> 
будет поступать значение типа <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform</codeEntityReference>.
В зависимости от настроек 
может содержать данные как о тиковой сделке <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.TickCandleBuilderValueTransform</codeEntityReference>,
так и о стакане <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.QuoteCandleBuilderValueTransform</codeEntityReference>.</para>

<para>Метод <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)</codeEntityReference> 
должен возвратить или новую свечу (если новые данные привели к формированию свечи), или обновить переданную (если данных пока недостаточно для создания новой свечи).
Если метод <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)</codeEntityReference> 
возвращает новую свечу, то <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.CandleBuilder`1</codeEntityReference> 
вызывает его еще раз, передав в метод то же самое значение <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform</codeEntityReference>. 
Метод будет вызываться до тех пор, пока <codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.Candles.Compression.CandleBuilder`1.ProcessValue(StockSharp.Messages.MarketDataMessage,`0,StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform)</codeEntityReference> 
не вернет переданную свечу. Это сделано для тех случаев, когда по одному входящему значению 
<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.ICandleBuilderValueTransform</codeEntityReference>
может быть сформировано несколько свечей:
</para>
<code language="C#">
<![CDATA[

/// <summary>
/// Построитель свечей типа <see cref="T:StockSharp.Algo.Candles.TickCandle" />.
/// </summary>
public class TickCandleBuilder : CandleBuilder<TickCandleMessage>
{
    /// <summary>
    /// Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.
    /// </summary>
    public TickCandleBuilder()
    {
    }

    /// <summary>
    /// Создать <see cref="T:StockSharp.Algo.Candles.Compression.TickCandleBuilder" />.
    /// </summary>
    public TickCandleBuilder()
    {
    }

    /// <summary>
    /// Создать новую свечу.
    /// </summary>
    /// <param name="series">Серия свечей.</param>
    /// <param name="transform">Данные, с помощью которых необходимо создать новую свечу.</param>
    /// <returns>Созданная свеча.</returns>
    protected override TickCandle CreateCandle(CandleSeries series, ICandleBuilderValueTransform transform)
    {
        var candle = new TickCandleMessage
        {
            TradeCount = (int)series.Arg,
            OpenTime = transform.Time,
            CloseTime = transform.Time
        };
        return this.FirstInitCandle(series, candle, transform);
    }

    /// <summary>
    /// Получить временные диапазоны, для которых у данного источника для передаваемой серии свечей есть данные.
    /// </summary>
    /// <param name="series">Серия свечей.</param>
    /// <returns>Временные диапазоны.</returns>
    public override IEnumerable<Range<DateTime>> GetSupportedRanges(CandleSeries series)
    {
        IEnumerable<Range<DateTime>> supportedRanges = base.GetSupportedRanges(series);
        if (!supportedRanges.IsEmpty<Range<DateTime>>())
        {
            if (!(series.Arg is int))
            {
                throw new ArgumentException();
            }
            if (((int) series.Arg) <= 0)
            {
                throw new ArgumentOutOfRangeException();
            }
        }
        return supportedRanges;
    }

    /// <summary>
    /// Сформирована ли свеча до добавления данных.
    /// </summary>
    /// <param name="series">Серия свечей.</param>
    /// <param name="candle">Свеча.</param>
    /// <param name="transform">Данные, с помощью которых принимается решение о необходимости окончания формирования текущей свечи.</param>
    /// <returns>True, если свечу необходимо закончить. Иначе, false.</returns>
    protected override bool IsCandleFinishedBeforeChange(CandleSeries series, TickCandleMessage candle, ICandleBuilderValueTransform transform)
    {
        return candle.TotalTicks != null && candle.TotalTicks.Value >= candle.MaxTradeCount;
    }

    /// <summary>
    /// Обновить свечу данными.
    /// </summary>
    /// <param name="series">Серия свечей.</param>
    /// <param name="candle">Свеча.</param>
    /// <param name="transform">Данные.</param>
    protected override void UpdateCandle(CandleSeries series, TickCandleMessage candle, ICandleBuilderValueTransform transform)
    {
		base.UpdateCandle(series, candle, transform);
		candle.TotalTicks++;
    }
}
]]>
</code>				
				</content>
			</step>
				
			<step>
				<content>
<para>Затем необходимо получить <codeEntityReference>T:StockSharp.Algo.Candles.Compression.CandleBuilderProvider</codeEntityReference> из подключения и добавить 
в него <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.TickCandleBuilder</codeEntityReference>:</para>
<alert class="caution"><codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.Compression.TickCandleBuilder</codeEntityReference>, 
как источник свечей, стандартно присутствует в <codeEntityReference>T:StockSharp.Algo.Candles.Compression.CandleBuilderProvider</codeEntityReference>.
Данный шаг представлен лишь в качестве примера.</alert>

<code language="C#">
<![CDATA[
private Connector _connector;

...

_connector.Adapter.CandleBuilderProvider.Register(new TickCandleBuilder());
]]>
</code>

				</content>
			</step>
        
			<step>
				<content>
				<para>Создать <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Candles.CandleSeries</codeEntityReference> и запросить по ней данные:</para>
<code language="C#">
<![CDATA[
var series = new CandleSeries(typeof(TickCandle), _security, 1000);

...

_connector.SubscribeCandles(series);
]]>
</code>				
				</content>
			</step>
       
		</steps>
	</procedure>

	</developerWalkthroughDocument>
</topic>